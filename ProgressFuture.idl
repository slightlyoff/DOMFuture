/*
 * Copyright (C) 2013 Google Inc. All rights reserved.
 */

// A subclass of EventedFuture which adds support for progress notification.
//
// Usage
// =====
//
//  doItAsyncWithProgress(...).
//    progress(function(progressValue) { ... }).
//    then(onaccept, onreject);
//
//  // or, using the event style:
//
//  var f = doItAsyncWithProgress(...).done(onaccept, onreject);
//  f.onprogress = function(progressEvent) {
//    var progressValue = progressEvent.value;
//    ...
//  };

interface ProgressResolverCallbacks extends ResolverCallbacks {
  // Provide new progress which onprogress handlers will be notified of
  void progress(optional any progressValue);
};

callback ProgressInitCallback = void (ProgressResolverCallbacks callbacks);

[Constructor(ProgressInitCallback init)]
interface ProgressFuture : EventedFuture {
  // Additional events
  //
  //   progress
  //     Bubbles: No
  //     Cancelable: No
  //     Context Info: value
  [TreatNonCallableAsNull]
     attribute Function?      onprogress;

  // Returns the Future from which it was called ("this").
  ProgressFuture  progress(optional EventHandler onprogress);
};
